#!/usr/bin/env python
# encoding: utf-8
"""
Drum Recognizer based on features extracted by a
Convolutional-RNN Neural Network.

"""

from __future__ import absolute_import, division, print_function

import argparse

from madmom.features.drums import (DrumPeakPickingProcessor,
                                   CRNNDrumProcessor)
from madmom.features import ActivationsProcessor
from madmom.processors import io_arguments, IOProcessor


def main():
    p = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description='''


    '''
    )
    # version
    p.add_argument('--version', action='version',
                   version='CRNNDrumTranscription.2017')
    io_arguments(p, output_suffix='.drums.txt')
    ActivationsProcessor.add_arguments(p)

    args = p.parse_args()

    # set immutable arguments
    args.fps = 100

    if args.verbose:
        print(args)

    # input processor
    if args.load:
        # load activations (features) from a file
        in_processor = ActivationsProcessor(mode='r', **vars(args))
    else:
        in_processor = CRNNDrumProcessor(**vars(args))

    # output processor
    if args.save:
        # save activations (features) to a file
        out_processor = ActivationsProcessor(mode='w', **vars(args))
    else:
        # load conditional random field
        out_processor = DrumPeakPickingProcessor(**vars(args))

    processor = IOProcessor(in_processor, out_processor)
    args.func(processor, **vars(args))


if __name__ == '__main__':
    main()
